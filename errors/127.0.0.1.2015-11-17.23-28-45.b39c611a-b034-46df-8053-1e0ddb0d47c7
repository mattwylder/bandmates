(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'SQLFORM' object has no attribute 'var'"
p3
sS'layer'
p4
S'/home/mat/Downloads/web2py/applications/bands/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    listings = db(db.listing.id > 0).select();\n    return dict(listings=listings)\n\n@auth.requires_login()\ndef listing():\n    """\n    listing_id = form.get_parameter("id")\n\n    SELECT *\n    FROM listing\n    WHERE listing.id = listing_id \n\n    CURSOR roles IS\n\tSELECT role.role_name\n        FROM listing_role JOIN role\n\tON listing_role.role_ndx = role.id\n\tWHERE listing_role.listing_idx = listing_id \n    \n    CURSOR audio IS\n\tSELECT *\n\tFROM listing_audio JOIN audio\n\tON listing_audio.audio_ndx = audio.id\n\tWHERE listing_audio.listing_idx = listing_id\n    \n    CURSOR genres IS\n\tSELECT *\n\tFROM listing_genre JOIN genre\n\tON listing_genre.genre_ndx = genre.id\n\tWHERE listing_genre.listing_idx = listing_id\n    """\n    listing = db.listing(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    \n    return dict(listing=listing)\n\n@auth.requires_login()\ndef audition():\n    \'\'\'\n    if auth.user() = thisAudition.parent.created_by\n    \'\'\'\n    created_by = "usernameexample"\n    roles = [\'guitar\', \'bass\']\n    body = \'i like this this and that\'\n    return dict(created_by=created_by, roles=roles, body=body)\n@auth.requires_login()\ndef listingform2():\n    form = SQLFORM.factory(\n\t\tField(\'title\',\'title\',requires=IS_NOT_EMPTY()),\n\t\tField(\'city\',\'City\', requires=IS_NOT_EMPTY()),\n\t\tField(\'desc\',\'description\', requires=IS_NOT_EMPTY()),\n\t\tField(\'roles\',\'Roles needed (Separated by commas)\'),\n\t\tField(\'genres\',\'Genres (Separated by commas)\'))\n    if form.process().accepted:    \n        title = form.var.title\n\tcity = form.var.city\n        desc = form.var.desc\n\tgenres = form.var.genres\n        roles = form.var.role\n\tlisting_ndx = db.listing.insert(title=title, city=city,body=desc)\n    \n\tfor cur_genre in genres.split(\',\'):\n\t    genre_ndx = db(db.genre.genre_name==cur_genre).select(db.genre.id).first()\n\t    if genre_ndx == None:\n\t\tgenre_ndx = db.genre.insert(genre_name=cur_genre)\n\t\tdb.listing_genre.insert(listing_ndx=listing_ndx,genre_ndx=genre_ndx)\n\n\tfor cur_role in roles.split(\',\'):\n\t    role_ndx = db(db.role.role_name==cur_role).select(db.role.id).first()\n\t    if role_ndx == None:\n\t\trole_ndx = db.role.insert(role_name=role)\n\t\tdb.listing_role.insert(listing_ndx=listing_ndx,role_ndx=role_ndx)\n   \n\n    return dict(form=form)\n\n@auth.requires_login()\ndef listingform():\n    #Checkboxes for genres\n    #Checkboxes for audio\n    form = SQLFORM(db.listing)\n    genre_form1 = SQLFORM(db.listing_genre)\n    genre_form2 = SQLFORM(db.listing_genre)\n    genre_form3 = SQLFORM(db.listing_genre)\n    role_form1 = SQLFORM(db.listing_role)\n    role_form2 = SQLFORM(db.listing_role)\n    role_form3 = SQLFORM(db.role)\n    \n    if form.process().accepted:\n\tresponse.flash = \'Your listing was posted\'\n\tredirect(URL(\'genreform\'))\n\t#args=\'listing\'\n    return dict(form=form, \n\t    genre_form1=genre_form1, genre_form2=genre_form2, \n\t    genre_form3=genre_form3, role_form1=role_form1, \n\t    role_form2=role_form2,role_form3=role_form3)\n\n@auth.requires_login()\ndef auditionform():\n    #Checkboxes for genres\n    #Checkboxes for audio\n    form = SQLFORM(db.audition)\n    return dict(form=form)\n\n@auth.requires_login()\ndef genreform():\n    \'\'\'\n    #Change genre to just be text and listing_ndx\n    #check whether this is an audition or a listing form args\n    parent_ndx = request.args(0,cast=int)\n    #test form, on button press check if that genre is in db.genre\n    #button done goes to roles\n    #if in db.genre:\n\tgenre_ndx = select id from genre where text = formdata\n    #else:\n\tgenre_ndx = db.genre.insert(genre_name=formdata)\n\t\n    \'\'\'\n    form1 = SQLFORM(db.genre)\n    form2 = SQLFORM(db.genre)\n    form3 = SQLFORM(db.genre)\n    \'\'\'\n    if audition:\n\tdb.listing_genre.insert(listing_ndx=parent_ndx,genre_ndx)\n    else:\n\tdb.audition_genre.insert(audition_ndx=parent_ndx,genre_ndx)\n    \'\'\'\n    return dict(form1=form1, form2=form2,form3=form3)\n\n@auth.requires_login()\ndef roleform():\n    \'\'\'\n    #More or less the same as genre_form\n    \'\'\'\n    form1 = SQLFORM(db.role)\n    form2 = SQLFORM(db.role)\n    form3 = SQLFORM(db.role)\n    return dict(form1=form1, form2=form2,form3=form3)\n\n@auth.requires_login()\n## All of a user\'s audio files\ndef audio():\n    """\n    SELECT *\n    FROM AUDIO\n    WHERE AUDIO.CREATED_BY = auth.user\n    """\n    return dict(form=auth())\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(listingform2)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/mat/Downloads/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/mat/Downloads/web2py/applications/bands/controllers/default.py", line 204, in <module>\n  File "/home/mat/Downloads/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/mat/Downloads/web2py/gluon/tools.py", line 3774, in f\n    return action(*a, **b)\n  File "/home/mat/Downloads/web2py/applications/bands/controllers/default.py", line 71, in listingform2\n    title = form.var.title\nAttributeError: \'SQLFORM\' object has no attribute \'var\'\n'
p11
s.